{"ast":null,"code":"const clientId = '31cf919a0720447eafbed8e970469abe';\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken = {\n  access_token: \"BQAb_2dGvkHxeHGUVh83i562lC-5g3XTZRl7GbJTbnv6Krdcxazy3pOqEC_6mVib4PZeZ1uOnAiuquiTN6Zs-nCcH2ebKIoPyD3zKb5_949QwgNqDP1SOmmwIDgLFAoFGYpHMSJU6GI\",\n  token_type: \"Bearer\",\n  expires_in: 3600\n};\nconst Spotify = {\n  async savePlaylist(playlistName, trackUris) {\n    if (!playlistName || trackUris.length === 0) {\n      console.error(\"Missing playlist name or tracks\");\n      return;\n    }\n    const token = accessToken.access_token; // Use the manually set token\n    const headers = {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n    try {\n      // Get user ID\n      console.log(\"Fetching user ID...\");\n      const userResponse = await fetch(\"https://api.spotify.com/v1/me\", {\n        headers\n      });\n      const userData = await userResponse.json();\n      if (!userData.id) throw new Error(\"Failed to get user ID\");\n      console.log(\"User ID:\", userData.id);\n\n      // Create Playlist\n      console.log(\"Creating playlist...\");\n      const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${userData.id}/playlists`, {\n        headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          name: playlistName\n        })\n      });\n      const playlistData = await playlistResponse.json();\n      if (!playlistData.id) throw new Error(\"Failed to create playlist\");\n      console.log(\"Playlist created! ID:\", playlistData.id);\n\n      // Add Tracks\n      console.log(\"Adding tracks to playlist...\");\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistData.id}/tracks`, {\n        headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n      const addTracksData = await addTracksResponse.json();\n      console.log(\"Tracks added successfully!\", addTracksData);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","access_token","token_type","expires_in","Spotify","savePlaylist","playlistName","trackUris","length","console","error","token","headers","Authorization","log","userResponse","fetch","userData","json","id","Error","playlistResponse","method","body","JSON","stringify","name","playlistData","addTracksResponse","uris","addTracksData"],"sources":["C:/Users/bulei/Desktop/full stack course/Jamming/jammming/src/components/Spotify/spotify.js"],"sourcesContent":["const clientId = '31cf919a0720447eafbed8e970469abe';\r\nconst redirectUri = \"http://localhost:3000/\";\r\nlet accessToken = {access_token:\"BQAb_2dGvkHxeHGUVh83i562lC-5g3XTZRl7GbJTbnv6Krdcxazy3pOqEC_6mVib4PZeZ1uOnAiuquiTN6Zs-nCcH2ebKIoPyD3zKb5_949QwgNqDP1SOmmwIDgLFAoFGYpHMSJU6GI\",\r\n    token_type:\"Bearer\",\r\n    expires_in:3600};\r\n\r\n\r\n\r\n\r\nconst Spotify = {\r\n    async savePlaylist(playlistName, trackUris) {\r\n        if (!playlistName || trackUris.length === 0) {\r\n            console.error(\"Missing playlist name or tracks\");\r\n            return;\r\n        }\r\n\r\n        const token = accessToken.access_token; // Use the manually set token\r\n        const headers = { \r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\" \r\n        };\r\n\r\n        try {\r\n            // Get user ID\r\n            console.log(\"Fetching user ID...\");\r\n            const userResponse = await fetch(\"https://api.spotify.com/v1/me\", { headers });\r\n            const userData = await userResponse.json();\r\n            if (!userData.id) throw new Error(\"Failed to get user ID\");\r\n            console.log(\"User ID:\", userData.id);\r\n            \r\n            // Create Playlist\r\n            console.log(\"Creating playlist...\");\r\n            const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${userData.id}/playlists`, {\r\n                headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ name: playlistName }),\r\n            });\r\n            const playlistData = await playlistResponse.json();\r\n            if (!playlistData.id) throw new Error(\"Failed to create playlist\");\r\n            console.log(\"Playlist created! ID:\", playlistData.id);\r\n\r\n            // Add Tracks\r\n            console.log(\"Adding tracks to playlist...\");\r\n            const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistData.id}/tracks`, {\r\n                headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ uris: trackUris }),\r\n            });\r\n            const addTracksData = await addTracksResponse.json();\r\n            \r\n            console.log(\"Tracks added successfully!\", addTracksData);\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n        }\r\n    }\r\n};\r\n\r\nexport default Spotify;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,WAAW,GAAG,wBAAwB;AAC5C,IAAIC,WAAW,GAAG;EAACC,YAAY,EAAC,6IAA6I;EACzKC,UAAU,EAAC,QAAQ;EACnBC,UAAU,EAAC;AAAI,CAAC;AAKpB,MAAMC,OAAO,GAAG;EACZ,MAAMC,YAAYA,CAACC,YAAY,EAAEC,SAAS,EAAE;IACxC,IAAI,CAACD,YAAY,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MACzCC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;MAChD;IACJ;IAEA,MAAMC,KAAK,GAAGX,WAAW,CAACC,YAAY,CAAC,CAAC;IACxC,MAAMW,OAAO,GAAG;MACZC,aAAa,EAAE,UAAUF,KAAK,EAAE;MAChC,cAAc,EAAE;IACpB,CAAC;IAED,IAAI;MACA;MACAF,OAAO,CAACK,GAAG,CAAC,qBAAqB,CAAC;MAClC,MAAMC,YAAY,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAAEJ;MAAQ,CAAC,CAAC;MAC9E,MAAMK,QAAQ,GAAG,MAAMF,YAAY,CAACG,IAAI,CAAC,CAAC;MAC1C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1DX,OAAO,CAACK,GAAG,CAAC,UAAU,EAAEG,QAAQ,CAACE,EAAE,CAAC;;MAEpC;MACAV,OAAO,CAACK,GAAG,CAAC,sBAAsB,CAAC;MACnC,MAAMO,gBAAgB,GAAG,MAAML,KAAK,CAAC,oCAAoCC,QAAQ,CAACE,EAAE,YAAY,EAAE;QAC9FP,OAAO;QACPU,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAEpB;QAAa,CAAC;MAC/C,CAAC,CAAC;MACF,MAAMqB,YAAY,GAAG,MAAMN,gBAAgB,CAACH,IAAI,CAAC,CAAC;MAClD,IAAI,CAACS,YAAY,CAACR,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAClEX,OAAO,CAACK,GAAG,CAAC,uBAAuB,EAAEa,YAAY,CAACR,EAAE,CAAC;;MAErD;MACAV,OAAO,CAACK,GAAG,CAAC,8BAA8B,CAAC;MAC3C,MAAMc,iBAAiB,GAAG,MAAMZ,KAAK,CAAC,wCAAwCW,YAAY,CAACR,EAAE,SAAS,EAAE;QACpGP,OAAO;QACPU,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEI,IAAI,EAAEtB;QAAU,CAAC;MAC5C,CAAC,CAAC;MACF,MAAMuB,aAAa,GAAG,MAAMF,iBAAiB,CAACV,IAAI,CAAC,CAAC;MAEpDT,OAAO,CAACK,GAAG,CAAC,4BAA4B,EAAEgB,aAAa,CAAC;IAC5D,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ;AACJ,CAAC;AAED,eAAeN,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}