{"ast":null,"code":"const clientId = '31cf919a0720447eafbed8e970469abe';\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken = \"\";\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(\"‚úÖ Using existing access token:\", accessToken);\n      return accessToken;\n    }\n    const urlParams = new URLSearchParams(window.location.hash.substring(1));\n    const token = urlParams.get(\"access_token\");\n    const expiresIn = urlParams.get(\"expires_in\");\n    if (token) {\n      accessToken = token;\n      console.log(\"üîë New access token received:\", accessToken);\n\n      // Automatically remove the token after it expires\n      setTimeout(() => accessToken = \"\", expiresIn * 1000);\n\n      // Remove token from URL\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      console.log(\"üîÑ Redirecting to Spotify login...\");\n      window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n    }\n  },\n  async savePlaylist(playlistName, trackUris) {\n    if (!playlistName || trackUris.length === 0) {\n      console.error(\"‚ùå Missing playlist name or tracks\");\n      return;\n    }\n    const token = Spotify.getAccessToken();\n    if (!token) {\n      console.error(\"‚ùå No access token available\");\n      return;\n    }\n    const headers = {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n    try {\n      // Get user ID\n      console.log(\"üîÑ Fetching user ID...\");\n      const userResponse = await fetch(\"https://api.spotify.com/v1/me\", {\n        headers\n      });\n      if (!userResponse.ok) throw new Error(\"Failed to get user ID\");\n      const userData = await userResponse.json();\n      console.log(\"‚úÖ User ID:\", userData.id);\n\n      // Create Playlist\n      console.log(\"üîÑ Creating playlist...\");\n      const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${userData.id}/playlists`, {\n        headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          name: playlistName\n        })\n      });\n      if (!playlistResponse.ok) throw new Error(\"Failed to create playlist\");\n      const playlistData = await playlistResponse.json();\n      console.log(\"‚úÖ Playlist created! ID:\", playlistData.id);\n\n      // Add Tracks\n      console.log(\"üîÑ Adding tracks to playlist...\");\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistData.id}/tracks`, {\n        headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n      if (!addTracksResponse.ok) throw new Error(\"Failed to add tracks to playlist\");\n      console.log(\"‚úÖ Tracks added successfully!\");\n    } catch (error) {\n      console.error(\"‚ùå Error:\", error);\n    }\n  },\n  async searchTracks(query) {\n    if (!query) {\n      console.error(\"‚ùå No search query provided\");\n      return [];\n    }\n    const token = this.getAccessToken();\n    if (!token) {\n      console.error(\"‚ùå No access token available\");\n      return [];\n    }\n    const headers = {\n      Authorization: `Bearer ${token}`,\n      'Content-type': 'application/json'\n    };\n    try {\n      console.log(`üîé Searching for \"${query}\"...`);\n      const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(query)}`, {\n        headers\n      });\n      if (!response.ok) throw new Error(`Search failed: ${response.statusText}`);\n      const data = await response.json();\n      const tracks = data.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist.map(artist => artist.name).join(\", \"),\n        album: track.album.name,\n        uri: track.uri\n      }));\n      console.log(\"‚úÖ Search results:\", tracks);\n      return tracks;\n    } catch (error) {\n      console.error(\"‚ùå Search error:\", error);\n      return [];\n    }\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","console","log","urlParams","URLSearchParams","window","location","hash","substring","token","get","expiresIn","setTimeout","history","pushState","href","savePlaylist","playlistName","trackUris","length","error","headers","Authorization","userResponse","fetch","ok","Error","userData","json","id","playlistResponse","method","body","JSON","stringify","name","playlistData","addTracksResponse","uris","searchTracks","query","response","encodeURIComponent","statusText","data","tracks","items","map","track","artist","join","album","uri"],"sources":["C:/Users/bulei/Desktop/full stack course/Jamming/jammming/src/components/Spotify/spotify.js"],"sourcesContent":["const clientId = '31cf919a0720447eafbed8e970469abe';\r\nconst redirectUri = \"http://localhost:3000/\";\r\nlet accessToken = \"\";\r\n\r\n\r\n\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            console.log(\"‚úÖ Using existing access token:\", accessToken);\r\n            return accessToken;\r\n        }\r\n\r\n        const urlParams = new URLSearchParams(window.location.hash.substring(1));\r\n        const token = urlParams.get(\"access_token\");\r\n        const expiresIn = urlParams.get(\"expires_in\");\r\n\r\n        if (token) {\r\n            accessToken = token;\r\n            console.log(\"üîë New access token received:\", accessToken);\r\n\r\n            // Automatically remove the token after it expires\r\n            setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n            \r\n            // Remove token from URL\r\n            window.history.pushState(\"Access Token\", null, \"/\");\r\n            return accessToken;\r\n        } else {\r\n            console.log(\"üîÑ Redirecting to Spotify login...\");\r\n            window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        }\r\n    },\r\n\r\n    async savePlaylist(playlistName, trackUris) {\r\n        if (!playlistName || trackUris.length === 0) {\r\n            console.error(\"‚ùå Missing playlist name or tracks\");\r\n            return;\r\n        }\r\n\r\n        const token = Spotify.getAccessToken();\r\n        if (!token) {\r\n            console.error(\"‚ùå No access token available\");\r\n            return;\r\n        }\r\n\r\n        const headers = { \r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\" \r\n        };\r\n\r\n        try {\r\n            // Get user ID\r\n            console.log(\"üîÑ Fetching user ID...\");\r\n            const userResponse = await fetch(\"https://api.spotify.com/v1/me\", { headers });\r\n            if (!userResponse.ok) throw new Error(\"Failed to get user ID\");\r\n            const userData = await userResponse.json();\r\n            console.log(\"‚úÖ User ID:\", userData.id);\r\n            \r\n            // Create Playlist\r\n            console.log(\"üîÑ Creating playlist...\");\r\n            const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${userData.id}/playlists`, {\r\n                headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ name: playlistName }),\r\n            });\r\n\r\n            if (!playlistResponse.ok) throw new Error(\"Failed to create playlist\");\r\n            const playlistData = await playlistResponse.json();\r\n            console.log(\"‚úÖ Playlist created! ID:\", playlistData.id);\r\n\r\n            // Add Tracks\r\n            console.log(\"üîÑ Adding tracks to playlist...\");\r\n            const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistData.id}/tracks`, {\r\n                headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ uris: trackUris }),\r\n            });\r\n\r\n            if (!addTracksResponse.ok) throw new Error(\"Failed to add tracks to playlist\");\r\n            console.log(\"‚úÖ Tracks added successfully!\");\r\n\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error:\", error);\r\n        }\r\n    },\r\n\r\n    async searchTracks(query) {\r\n        if(!query) {\r\n            console.error(\"‚ùå No search query provided\");\r\n            return [];\r\n        }\r\n\r\n        const token = this.getAccessToken();\r\n        if(!token) {\r\n            console.error(\"‚ùå No access token available\");\r\n            return [];\r\n        }\r\n\r\n        const headers = {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-type': 'application/json',\r\n        };\r\n\r\n        try {\r\n            console.log(`üîé Searching for \"${query}\"...`);\r\n            const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(query)}`, { headers });\r\n\r\n            if(!response.ok) throw new Error(`Search failed: ${response.statusText}`);\r\n\r\n            const data = await response.json();\r\n            const tracks = data.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artist.map(artist => artist.name).join(\", \"),\r\n                    album: track.album.name,\r\n                    uri: track.uri,\r\n                }));\r\n\r\n                console.log(\"‚úÖ Search results:\", tracks);\r\n                return tracks;\r\n        } catch(error) {\r\n            console.error(\"‚ùå Search error:\", error);\r\n            return [];\r\n        }\r\n\r\n    },\r\n};\r\n\r\nexport default Spotify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}