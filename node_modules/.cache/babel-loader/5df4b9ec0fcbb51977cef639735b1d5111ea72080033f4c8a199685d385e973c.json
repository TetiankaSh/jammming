{"ast":null,"code":"const clientId = '31cf919a0720447eafbed8e970469abe';\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken = \"BQCPZJ9ZR6QDv1kbS6kO88YtqPlpW9snHT8EkGriXrhXBNDqRzBzOWaTV0cXVtb4zKj8DTKG1YJqhkuG2bXXPr_urSAG4RQvohMeDBWv2fLw90Prmsw-PuzK-kGk9_n37OJVT-2aadU\";\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(\"‚úÖ Using existing access token:\", accessToken);\n      return accessToken;\n    }\n    const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (tokenMatch && expiresInMatch) {\n      accessToken = tokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      console.log(\"‚úÖ New access token received:\", accessToken);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, '/');\n      return accessToken;\n    } else {\n      console.log(\"‚ùå No access token found. Redirecting to Spotify auth...\");\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = authUrl;\n    }\n  },\n  async savePlaylist(playlistName, trackUris) {\n    if (!playlistName || trackUris.length === 0) {\n      console.error(\"‚ùå Missing playlist name or tracks\");\n      return;\n    }\n    const token = Spotify.getAccessToken();\n    if (!token) {\n      console.error(\"‚ùå No access token available\");\n      return;\n    }\n    const headers = {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n    try {\n      // Get user ID\n      console.log(\"üîÑ Fetching user ID...\");\n      const userResponse = await fetch(\"https://api.spotify.com/v1/me\", {\n        headers\n      });\n      if (!userResponse.ok) throw new Error(\"Failed to get user ID\");\n      const userData = await userResponse.json();\n      console.log(\"‚úÖ User ID:\", userData.id);\n\n      // Create Playlist\n      console.log(\"üîÑ Creating playlist...\");\n      const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${userData.id}/playlists`, {\n        headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          name: playlistName\n        })\n      });\n      if (!playlistResponse.ok) throw new Error(\"Failed to create playlist\");\n      const playlistData = await playlistResponse.json();\n      console.log(\"‚úÖ Playlist created! ID:\", playlistData.id);\n\n      // Add Tracks\n      console.log(\"üîÑ Adding tracks to playlist...\");\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistData.id}/tracks`, {\n        headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n      if (!addTracksResponse.ok) throw new Error(\"Failed to add tracks to playlist\");\n      console.log(\"‚úÖ Tracks added successfully!\");\n    } catch (error) {\n      console.error(\"‚ùå Error:\", error);\n    }\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","console","log","tokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","authUrl","savePlaylist","playlistName","trackUris","length","error","token","headers","Authorization","userResponse","fetch","ok","Error","userData","json","id","playlistResponse","method","body","JSON","stringify","name","playlistData","addTracksResponse","uris"],"sources":["C:/Users/bulei/Desktop/full stack course/Jamming/jammming/src/components/Spotify/spotify.js"],"sourcesContent":["const clientId = '31cf919a0720447eafbed8e970469abe';\r\nconst redirectUri = \"http://localhost:3000/\";\r\nlet accessToken = \"BQCPZJ9ZR6QDv1kbS6kO88YtqPlpW9snHT8EkGriXrhXBNDqRzBzOWaTV0cXVtb4zKj8DTKG1YJqhkuG2bXXPr_urSAG4RQvohMeDBWv2fLw90Prmsw-PuzK-kGk9_n37OJVT-2aadU\";\r\n\r\n\r\n\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            console.log(\"‚úÖ Using existing access token:\", accessToken);\r\n            return accessToken;\r\n        }\r\n\r\n        const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (tokenMatch && expiresInMatch) {\r\n            accessToken = tokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            console.log(\"‚úÖ New access token received:\", accessToken);\r\n\r\n            window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n            window.history.pushState(\"Access Token\", null, '/');\r\n\r\n            return accessToken;\r\n        } else {\r\n            console.log(\"‚ùå No access token found. Redirecting to Spotify auth...\");\r\n            const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = authUrl;\r\n        }\r\n    },\r\n\r\n    async savePlaylist(playlistName, trackUris) {\r\n        if (!playlistName || trackUris.length === 0) {\r\n            console.error(\"‚ùå Missing playlist name or tracks\");\r\n            return;\r\n        }\r\n\r\n        const token = Spotify.getAccessToken();\r\n        if (!token) {\r\n            console.error(\"‚ùå No access token available\");\r\n            return;\r\n        }\r\n\r\n        const headers = { \r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\" \r\n        };\r\n\r\n        try {\r\n            // Get user ID\r\n            console.log(\"üîÑ Fetching user ID...\");\r\n            const userResponse = await fetch(\"https://api.spotify.com/v1/me\", { headers });\r\n            if (!userResponse.ok) throw new Error(\"Failed to get user ID\");\r\n            const userData = await userResponse.json();\r\n            console.log(\"‚úÖ User ID:\", userData.id);\r\n            \r\n            // Create Playlist\r\n            console.log(\"üîÑ Creating playlist...\");\r\n            const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${userData.id}/playlists`, {\r\n                headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ name: playlistName }),\r\n            });\r\n\r\n            if (!playlistResponse.ok) throw new Error(\"Failed to create playlist\");\r\n            const playlistData = await playlistResponse.json();\r\n            console.log(\"‚úÖ Playlist created! ID:\", playlistData.id);\r\n\r\n            // Add Tracks\r\n            console.log(\"üîÑ Adding tracks to playlist...\");\r\n            const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistData.id}/tracks`, {\r\n                headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ uris: trackUris }),\r\n            });\r\n\r\n            if (!addTracksResponse.ok) throw new Error(\"Failed to add tracks to playlist\");\r\n            console.log(\"‚úÖ Tracks added successfully!\");\r\n\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error:\", error);\r\n        }\r\n    }\r\n};\r\n\r\nexport default Spotify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}